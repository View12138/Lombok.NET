
using Microsoft.CodeAnalysis.CSharp;

namespace Lombok.NET.Tests;

[TestClass]
public class ConstructorGeneratorsTests
{
	[DataRow(MemberType.Property, 1, "Name", "Age")]
	[DataRow(MemberType.Field, 1, "this.name", "this.age")]
	[TestMethod]
	public void AllArgsConstructorMemberTypeTest(MemberType memberType, int size, params string[] args)
	{
		string source = $$"""
		using Lombok.NET.ConstructorGenerators;
		namespace Lombok.NET.Tests;
		
		[AllArgsConstructor(MemberType = MemberType.{{memberType}})]
		internal partial class TestClass
		{
			private string name;
			private int age;
			private string Name { get; set; }
			private int Age { get; set; }
		}
		""";
		string expected = $$"""
			// <auto-generated/>
			using Lombok.NET.ConstructorGenerators;
			
			namespace Lombok.NET.Tests;
			#nullable enable
			internal partial class TestClass
			{
			    internal TestClass(string name, int age)
			    {
			        {{args[0]}} = name;
			        {{args[1]}} = age;
			    }
			}
			""";
		var result = GeneratorTest.Build()
			.AddGenerator(new ConstructorGenerators.AllArgsConstructorGenerator())
			.CSharpResult(source);

		Assert.IsTrue(result.Diagnostics.IsEmpty);
		Assert.AreEqual(size, result.GeneratedTrees.Length);
		string actual = result.GeneratedTrees.Single().GetText().ToString();
		Assert.AreEqual(CSharpSyntaxTree.ParseText(expected).GetText().ToString(), actual);

		Console.WriteLine($"actual:{Environment.NewLine}{actual}");
	}

	[DataRow(AccessTypes.Private, 1, "_name")]
	[DataRow(AccessTypes.Protected, 1, "_name", "_age")]
	[DataRow(AccessTypes.Internal, 1, "_name", "_email")]
	[DataRow(AccessTypes.Public, 1, "_name", "_age", "_email", "_gender")]
	[TestMethod]
	public void AllArgsConstructorAccessTypesTest(AccessTypes accessTypes, int size, params string[] args)
	{
		Dictionary<string, string> types = new()
		{
			{"_name", "string" },
			{"_age", "int" },
			{"_email", "string" },
			{"_gender", "int" },
		};
		string source = $$"""
			using Lombok.NET.ConstructorGenerators;
			namespace Lombok.NET.Tests;

			[AllArgsConstructor(AccessTypes = AccessTypes.{{accessTypes}})]
			internal partial class TestClass
			{
				private string _name;
				protected int _age;
				internal string _email;
				public int _gender;
			}
			""";
		var paramList = string.Join(", ", args.Select(arg => $"{types[arg]} {arg[1..]}"));
		var bodyList = string.Join($"{Environment.NewLine}        ", args.Select(arg => $"{arg} = {arg[1..]};"));
		string expected = $$"""
			// <auto-generated/>
			using Lombok.NET.ConstructorGenerators;

			namespace Lombok.NET.Tests;
			#nullable enable
			internal partial class TestClass
			{
			    internal TestClass({{paramList}})
			    {
			        {{bodyList}}
			    }
			}
			""";
		var result = GeneratorTest.Build()
			.AddGenerator(new ConstructorGenerators.AllArgsConstructorGenerator())
			.CSharpResult(source);

		Assert.IsTrue(result.Diagnostics.IsEmpty);
		Assert.AreEqual(size, result.GeneratedTrees.Length);
		string actual = result.GeneratedTrees.Single().GetText().ToString();
		Assert.AreEqual(CSharpSyntaxTree.ParseText(expected).GetText().ToString(), actual);

		Console.WriteLine($"actual:{Environment.NewLine}{actual}");
	}

	[DataRow(AccessTypes.Private, 1, "private")]
	[DataRow(AccessTypes.Protected, 1, "protected")]
	[DataRow(AccessTypes.Internal, 1, "internal")]
	[DataRow(AccessTypes.Public, 1, "public")]
	[TestMethod]
	public void AllArgsConstructorModifierTypeTest(AccessTypes accessTypes, int size, string modifier)
	{
		string source = $$"""
			using Lombok.NET.ConstructorGenerators;
			namespace Lombok.NET.Tests;

			[AllArgsConstructor(ModifierType = AccessTypes.{{accessTypes}})]
			internal partial class TestClass
			{
				private string _name;
				private int _age;
			}
			""";
		string expected = $$"""
			// <auto-generated/>
			using Lombok.NET.ConstructorGenerators;

			namespace Lombok.NET.Tests;
			#nullable enable
			internal partial class TestClass
			{
			    {{modifier}} TestClass(string name, int age)
			    {
			        _name = name;
			        _age = age;
			    }
			}
			""";
		var result = GeneratorTest.Build()
			.AddGenerator(new ConstructorGenerators.AllArgsConstructorGenerator())
			.CSharpResult(source);

		Assert.IsTrue(result.Diagnostics.IsEmpty);
		Assert.AreEqual(size, result.GeneratedTrees.Length);
		string actual = result.GeneratedTrees.Single().GetText().ToString();
		Assert.AreEqual(CSharpSyntaxTree.ParseText(expected).GetText().ToString(), actual);

		Console.WriteLine($"actual:{Environment.NewLine}{actual}");
	}
}
